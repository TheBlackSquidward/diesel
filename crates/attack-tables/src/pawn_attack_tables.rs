use std::fs::File;
use std::io::Write;
use core::bitboard::{EMPTY_BITBOARD, BitBoard};
use core::color::{Color, NUM_COLORS};
use core::square::{Square, NUM_SQUARES};

fn generate_pawn_attack(color: Color, square: Square) -> BitBoard {
    let mut attacks = EMPTY_BITBOARD;
    let square_index = square.to_index();
    let square_rank = square.get_rank().to_index();
    let square_file = square.get_file().to_index();
    if color == Color::White {
        if square_rank < 7 {
            if square_file > 0 {
                attacks |= BitBoard::new(1u64 << (square_index + 7));
            }
            if square_file < 7 {
                attacks |= BitBoard::new(1u64 << (square_index + 9));
            }
        }
    } else {
        if square_rank > 0 {
            if square_file > 0 {
                attacks |= BitBoard::new(1u64 << (square_index - 9));
            }
            if square_file < 7 {
                attacks |= BitBoard::new(1u64 << (square_index - 7));
            }
        }
    }
    attacks
}

pub fn generate_pawn_attack_tables() -> [[BitBoard; NUM_SQUARES]; NUM_COLORS] {
    let mut attacks = [[EMPTY_BITBOARD; NUM_SQUARES]; NUM_COLORS];
    for color in &[Color::White, Color::Black] {
        for square in 0..NUM_SQUARES {
            attacks[color.to_index()][square] = generate_pawn_attack(*color, Square::new(square as u8));
        }
    }
    attacks
}

pub fn output_pawn_attack_tables(attacks: [[BitBoard; NUM_SQUARES]; NUM_COLORS]) {
    let mut file = File::create("attack_tables/pawn_attack_tables.rs").expect("Unable to create file");

    writeln!(file, "// This file is auto generated by the attack-tables crate. Do not edit manually.").unwrap();
    writeln!(file, "// It contains pre-generated pawn attack tables.").unwrap();
    writeln!(file, "").unwrap();

    writeln!(file, "use core::bitboard::BitBoard;").unwrap();
    writeln!(file, "use core::color::NUM_COLORS;").unwrap();
    writeln!(file, "use core::square::NUM_SQUARES;").unwrap();
    writeln!(file, "use core::bitboard::EMPTY_BITBOARD;").unwrap();
    writeln!(file, "").unwrap();

    writeln!(file, "pub const PAWN_ATTACK_TABLES: [[BitBoard; NUM_SQUARES]; NUM_COLORS] = [").unwrap();
    for color in &[Color::White, Color::Black] {
        writeln!(file, "    [").unwrap();
        for square in 0..NUM_SQUARES {
            writeln!(file, "        BitBoard::new({}),", attacks[color.to_index()][square].as_u64()).unwrap();
        }
        writeln!(file, "    ],").unwrap();
    }
    writeln!(file, "];").unwrap();
}