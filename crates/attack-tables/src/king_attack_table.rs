use std::fs::File;
use std::io::Write;
use core::square::{Square, NUM_SQUARES};
use core::bitboard::{EMPTY_BITBOARD, BitBoard};

pub fn generate_king_attack(square: Square) -> BitBoard {
    let mut attacks = EMPTY_BITBOARD;
    let square_index = square.to_index();
    let square_rank = square.get_rank().to_index();
    let square_file = square.get_file().to_index();
    if square_rank < 7 {
        attacks |= BitBoard::new(1u64 << (square_index + 8));
        if square_file > 0 {
            attacks |= BitBoard::new(1u64 << (square_index + 7));
        }
        if square_file < 7 {
            attacks |= BitBoard::new(1u64 << (square_index + 9));
        }
    }
    if square_file > 0 {
        attacks |= BitBoard::new(1u64 << (square_index - 1));
    }
    if square_file < 7 {
        attacks |= BitBoard::new(1u64 << (square_index + 1));
    }
    if square_rank > 0 {
        attacks |= BitBoard::new(1u64 << (square_index - 8));
        if square_file > 0 {
            attacks |= BitBoard::new(1u64 << (square_index - 9));
        }
        if square_file < 7 {
            attacks |= BitBoard::new(1u64 << (square_index - 7));
        }
    }
    attacks
}

pub fn generate_king_attack_table() -> [BitBoard; NUM_SQUARES] {
    let mut attacks = [EMPTY_BITBOARD; NUM_SQUARES];
    for square in 0..NUM_SQUARES {
        attacks[square] = generate_king_attack(Square::new(square as u8));
    }
    attacks
}

pub fn output_king_attack_table(king_attack_table: [BitBoard; NUM_SQUARES]) {
    let mut file = File::create("attack_tables/king_attack_tables.rs").expect("Unable to create file");

    writeln!(file, "// This file is auto generated by the attack-tables crate. Do not edit manually.").unwrap();
    writeln!(file, "// It contains pre-generated king attack tables.").unwrap();
    writeln!(file, "").unwrap();

    writeln!(file, "use core::bitboard::BitBoard;").unwrap();
    writeln!(file, "use core::square::NUM_SQUARES;").unwrap();
    writeln!(file, "use core::bitboard::EMPTY_BITBOARD;").unwrap();
    writeln!(file, "").unwrap();

    writeln!(file, "pub const KING_ATTACK_TABLES: [BitBoard; NUM_SQUARES] = [").unwrap();
    for square in 0..NUM_SQUARES {
        writeln!(file, "    BitBoard::new({}),", king_attack_table[square].as_u64()).unwrap();
    }
    writeln!(file, "];").unwrap();
}